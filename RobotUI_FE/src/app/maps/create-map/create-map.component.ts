import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { Location } from "@angular/common"

@Component({
  selector: 'app-create-map',
  templateUrl: './create-map.component.html',
  styleUrl: './create-map.component.css'
})
export class CreateMapComponent {
  idParam:any
  nameParam:any
  selectedPoint: string = '';
  errorMessage: string = '';

  recordMapPopupState = false
  uploadMapPopupState = false
  downloadMapToastState = false

  dropDownOCstate = false
  uploadPopupState = false

  dropDownOptions = [
    {
      optionId: 0,
      nameTag: "Option 1"
    },
    {
      optionId: 1,
      nameTag: "Option 2"
    },
    {
      optionId: 2,
      nameTag: "Option 3"
    },
    {
      optionId: 3,
      nameTag: "Option 4"
    },
    {
      optionId: 4,
      nameTag: "Option 5"
    },
    {
      optionId: 5,
      nameTag: "Option 6"
    },
    {
      optionId: 6,
      nameTag: "Option 7"
    },
    {
      optionId: 7,
      nameTag: "Option 8"
    }
  ]

  dropDownOption = 'No Object Type Selected'

  openObjectDD(){
    this.dropDownOCstate = !this.dropDownOCstate
  }

  changeObject(order:number) {
    this.dropDownOption = this.dropDownOptions[order].nameTag
    this.dropDownOCstate = !this.dropDownOCstate
    const selectedOption = this.dropDownOptions.find(option => option.optionId === order);
    if (selectedOption) {
      this.selectedPoint = selectedOption.nameTag;
      console.log('Selected point:', this.selectedPoint); // Add this to verify
    } else {
      console.log('No option found for optionId:', order);
    }
    this.dropDownOCstate = false; // Close the dropdown after selection
  }

  constructor(private route: ActivatedRoute, private router:Router, private location:Location) { }

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.idParam = params['id'];

      console.log('param1:', this.idParam);
    });

    this.fetchDetails(this.idParam);
  }

  fetchDetails(id: any,){
    console.log([id])  //Do your API req and Store response in an variable
  }

  optionsOne = [
    {
      nameTag:"Search",
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M22.4388 31.5007C24.5096 31.5002 26.5207 30.807 28.152 29.5313L33.2806 34.66L34.9303 33.0103L29.8016 27.8816C31.078 26.2503 31.7716 24.2387 31.7721 22.1673C31.7721 17.0212 27.585 12.834 22.4388 12.834C17.2926 12.834 13.1055 17.0212 13.1055 22.1673C13.1055 27.3135 17.2926 31.5007 22.4388 31.5007ZM22.4388 15.1673C26.2993 15.1673 29.4388 18.3068 29.4388 22.1673C29.4388 26.0278 26.2993 29.1673 22.4388 29.1673C18.5783 29.1673 15.4388 26.0278 15.4388 22.1673C15.4388 18.3068 18.5783 15.1673 22.4388 15.1673Z" fill="#D30000"/></svg>',
    },
    {
      nameTag: "Upload",
      fn: this.uploadPopup.bind(this),
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M24.9456 23.0507C24.9252 23.0246 24.899 23.0034 24.8692 22.9889C24.8393 22.9744 24.8066 22.9668 24.7734 22.9668C24.7402 22.9668 24.7074 22.9744 24.6775 22.9889C24.6477 23.0034 24.6216 23.0246 24.6011 23.0507L21.5386 26.9253C21.5133 26.9576 21.4977 26.9963 21.4934 27.037C21.4891 27.0777 21.4964 27.1188 21.5143 27.1556C21.5323 27.1924 21.5603 27.2234 21.595 27.2451C21.6298 27.2667 21.6699 27.2782 21.7109 27.2781H23.7316V33.9062C23.7316 34.0265 23.83 34.1249 23.9503 34.1249H25.5909C25.7113 34.1249 25.8097 34.0265 25.8097 33.9062V27.2808H27.8359C28.0191 27.2808 28.1202 27.0703 28.0081 26.9281L24.9456 23.0507Z" fill="#D30000"/><path d="M32.9602 20.527C31.7078 17.2238 28.5168 14.875 24.7789 14.875C21.041 14.875 17.85 17.2211 16.5977 20.5242C14.2543 21.1395 12.5234 23.275 12.5234 25.8125C12.5234 28.834 14.9707 31.2812 17.9895 31.2812H19.0859C19.2063 31.2812 19.3047 31.1828 19.3047 31.0625V29.4219C19.3047 29.3016 19.2063 29.2031 19.0859 29.2031H17.9895C17.068 29.2031 16.2012 28.8367 15.5559 28.1723C14.9133 27.5105 14.5715 26.6191 14.6016 25.6949C14.6262 24.973 14.8723 24.2949 15.318 23.7234C15.7746 23.141 16.4145 22.7172 17.1254 22.5285L18.1617 22.2578L18.5418 21.257C18.777 20.6336 19.1051 20.0512 19.518 19.5234C19.9256 19.0004 20.4084 18.5406 20.9508 18.159C22.0746 17.3688 23.398 16.9504 24.7789 16.9504C26.1598 16.9504 27.4832 17.3688 28.607 18.159C29.1512 18.5418 29.6324 19.0012 30.0398 19.5234C30.4527 20.0512 30.7809 20.6363 31.016 21.257L31.3934 22.2551L32.427 22.5285C33.909 22.9277 34.9453 24.2758 34.9453 25.8125C34.9453 26.7176 34.5926 27.5707 33.9527 28.2105C33.6389 28.5262 33.2657 28.7764 32.8545 28.9468C32.4434 29.1172 32.0025 29.2043 31.5574 29.2031H30.4609C30.3406 29.2031 30.2422 29.3016 30.2422 29.4219V31.0625C30.2422 31.1828 30.3406 31.2812 30.4609 31.2812H31.5574C34.5762 31.2812 37.0234 28.834 37.0234 25.8125C37.0234 23.2777 35.298 21.1449 32.9602 20.527Z" fill="#D30000"/></svg>',
    },
    {
      nameTag: "Options",
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_1496_30175)"><path d="M35.3663 27.9504H34.6226C34.5624 27.934 34.5078 27.9066 34.4476 27.8957C32.8835 27.6551 31.6476 26.3535 31.5437 24.8278C31.4234 23.1215 32.3968 21.6778 33.9827 21.2074C34.1905 21.1473 34.4093 21.1035 34.6225 21.0489H35.3663C35.4155 21.0653 35.4593 21.0926 35.514 21.0981C36.9577 21.3332 38.0569 22.3723 38.3686 23.7942C38.3905 23.9035 38.4233 24.0129 38.4507 24.1223V24.866C38.4343 24.9153 38.4069 24.9645 38.4015 25.0137C38.1718 26.4356 37.16 27.5184 35.7546 27.8465C35.6178 27.8793 35.4921 27.9176 35.3663 27.9504L35.3663 27.9504ZM14.3445 21.0488L15.0883 21.0489C15.1485 21.0653 15.2032 21.0926 15.2633 21.0981C16.8383 21.3442 18.0688 22.6512 18.1672 24.1934C18.2766 25.8942 17.2922 27.3324 15.7008 27.7973C15.4984 27.8575 15.2907 27.9012 15.0883 27.9504H14.3445C14.2953 27.934 14.2516 27.9067 14.2023 27.8957C12.7805 27.6332 11.8508 26.8074 11.4078 25.4293C11.3477 25.2489 11.3148 25.0574 11.2656 24.8715V24.1278C11.282 24.0785 11.3094 24.0293 11.3148 23.9801C11.55 22.5528 12.5562 21.4754 13.9617 21.1473C14.093 21.1145 14.2188 21.0816 14.3445 21.0488ZM24.4836 21.0489H25.2273C25.2875 21.0653 25.3422 21.0926 25.4023 21.1035C26.9719 21.3496 28.2352 22.7059 28.3008 24.2371C28.3773 25.9598 27.3383 27.42 25.7359 27.8301C25.5664 27.8739 25.3969 27.9121 25.2273 27.9504H24.4836C24.4234 27.934 24.3687 27.9067 24.3086 27.8957C22.7391 27.6551 21.4758 26.2934 21.4047 24.7621C21.3227 23.0395 22.3672 21.5793 23.9695 21.1692C24.1445 21.1254 24.3141 21.0871 24.4836 21.0489Z" fill="#D30000"/></g><defs><clipPath id="clip0_1496_30175"><rect width="28" height="28" fill="white" transform="translate(10.7734 10.5)"/></clipPath></defs></svg>'
    },
    {
      nameTag: "Arrow",
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M30.3967 15.166L28.74 16.846L31.7033 19.8327H20.375C18.5185 19.8327 16.738 20.5702 15.4253 21.8829C14.1125 23.1957 13.375 24.9762 13.375 26.8327C13.375 28.6892 14.1125 30.4697 15.4253 31.7824C16.738 33.0952 18.5185 33.8327 20.375 33.8327H22.7083V31.4993H20.375C19.1373 31.4993 17.9503 31.0077 17.0752 30.1325C16.2 29.2573 15.7083 28.0704 15.7083 26.8327C15.7083 25.595 16.2 24.408 17.0752 23.5329C17.9503 22.6577 19.1373 22.166 20.375 22.166H31.7033L28.74 25.0943L30.385 26.7393L36.1717 20.9993L30.3967 15.166Z" fill="#D30000"/></svg>',
    },
    {
      nameTag: "Pan",
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0_1496_30195)"><path d="M20.6888 16.9173L24.7721 12.834M24.7721 12.834L28.8555 16.9173M24.7721 12.834V36.1673M36.4388 24.5007H13.1055M36.4388 24.5007L32.3555 28.584M36.4388 24.5007L32.3555 20.4173M13.1055 24.5007L17.1888 20.4173M13.1055 24.5007L17.1888 28.584M24.7721 36.1673L20.6888 32.084M24.7721 36.1673L28.8555 32.084" stroke="#D30000" stroke-width="2.66667"/></g><defs><clipPath id="clip0_1496_30195"><rect width="28" height="28" fill="white" transform="translate(10.7734 10.5)"/></clipPath></defs></svg>'
    },
    {
      nameTag:"Navigate",
      iconComp: '<svg width="37" height="37" viewBox="0 0 49 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M37.9363 11.0635C38.0793 11.2066 38.1755 11.3896 38.2123 11.5885C38.2491 11.7874 38.2247 11.9928 38.1423 12.1775L26.8283 37.6335C26.7493 37.8115 26.6199 37.9626 26.4562 38.0682C26.2925 38.1737 26.1015 38.2292 25.9067 38.2277C25.7119 38.2262 25.5218 38.1678 25.3597 38.0598C25.1976 37.9518 25.0706 37.7987 24.9943 37.6195L20.9123 28.0875L11.3783 24.0035C11.1998 23.9267 11.0475 23.7995 10.94 23.6376C10.8326 23.4756 10.7747 23.2858 10.7735 23.0914C10.7722 22.8971 10.8276 22.7065 10.9329 22.5432C11.0382 22.3798 11.1888 22.2506 11.3663 22.1715L36.8223 10.8575C37.0068 10.7756 37.2118 10.7514 37.4102 10.7882C37.6087 10.825 37.7934 10.921 37.9363 11.0635ZM14.2723 23.0675L22.0663 26.4075C22.302 26.5091 22.4896 26.6974 22.5903 26.9335L25.9303 34.7275L35.2583 13.7395L14.2723 23.0675Z" fill="#D30000"/></svg>'
    }
  ]


  optionsTwo = [
    {
      nameTag: 'Expand',
      iconComp: '<svg width="37" height="37" viewBox="0 0 48 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.668 19.8327V15.166M14.668 15.166H19.3346M14.668 15.166L20.5013 20.9993M33.3346 19.8327V15.166M33.3346 15.166H28.668M33.3346 15.166L27.5013 20.9993M14.668 29.166V33.8327M14.668 33.8327H19.3346M14.668 33.8327L20.5013 27.9993M33.3346 33.8327L27.5013 27.9993M33.3346 33.8327V29.166M33.3346 33.8327H28.668" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/></svg>'
    },
    {
      nameTag: "Zoom Out",
      iconComp: '<svg width="37" height="37" viewBox="0 0 48 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M22.8333 32.6667C27.988 32.6667 32.1667 28.488 32.1667 23.3333C32.1667 18.1787 27.988 14 22.8333 14C17.6787 14 13.5 18.1787 13.5 23.3333C13.5 28.488 17.6787 32.6667 22.8333 32.6667Z" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/><path d="M34.5008 35.0008L29.4258 29.9258" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/><path d="M19.332 23.334H26.332" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/></svg>'
    },
    {
      nameTag: "Zoom In",
      iconComp: '<svg width="37" height="37" viewBox="0 0 48 49" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M22.8333 32.6667C27.988 32.6667 32.1667 28.488 32.1667 23.3333C32.1667 18.1787 27.988 14 22.8333 14C17.6787 14 13.5 18.1787 13.5 23.3333C13.5 28.488 17.6787 32.6667 22.8333 32.6667Z" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/><path d="M34.5008 35.0008L29.4258 29.9258" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/><path d="M22.832 19.834V26.834" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/><path d="M19.332 23.334H26.332" stroke="#D30000" stroke-width="2.66667" stroke-linecap="round" stroke-linejoin="round"/></svg>'
    }
  ]

  createMapUpload = [
    {
      title: "Upload a Map and Edit",
      fn: this.uploadMapPopup.bind(this),
      desc: 'Replace the existing map or Edit the map',
      iconComp: '<svg width="33" height="33" viewBox="0 0 37 27" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M18.6043 0.0449219C13.7163 0.0449219 11.0757 1.68997 9.7269 3.93801C8.61271 5.79498 8.46582 7.94458 8.44657 9.49086C7.08452 9.61561 5.35168 10.0868 3.85393 11.1653C2.02708 12.4806 0.601562 14.6663 0.601562 18.0476C0.601562 21.4289 2.02708 23.6146 3.85393 24.93C5.64253 26.2178 7.76641 26.6397 9.1937 26.6397H28.0148C29.4421 26.6397 31.566 26.2178 33.3546 24.93C35.1814 23.6146 36.6069 21.4289 36.6069 18.0476C36.6069 14.6663 35.1814 12.4806 33.3546 11.1653C31.8568 10.0868 30.124 9.61561 28.7619 9.49086C28.7427 7.94458 28.5958 5.79498 27.4816 3.93801C26.1328 1.68997 23.4922 0.0449219 18.6043 0.0449219ZM9.9437 10.2055C9.9437 8.60941 9.95922 6.46628 11.0131 4.70975C12.0169 3.03673 14.0816 1.54492 18.6043 1.54492C23.1269 1.54492 25.1916 3.03673 26.1954 4.70975C27.2493 6.46628 27.2648 8.60941 27.2648 10.2055C27.2648 10.6197 27.6006 10.9555 28.0148 10.9555C29.2021 10.9555 30.9993 11.3178 32.4781 12.3825C33.9187 13.4198 35.1069 15.1552 35.1069 18.0476C35.1069 20.9401 33.9187 22.6754 32.4781 23.7127C30.9993 24.7775 29.2021 25.1397 28.0148 25.1397H9.1937C8.00641 25.1397 6.20922 24.7775 4.73041 23.7127C3.28983 22.6754 2.10156 20.9401 2.10156 18.0476C2.10156 15.1552 3.28983 13.4198 4.73041 12.3825C6.20922 11.3178 8.00641 10.9555 9.1937 10.9555C9.60791 10.9555 9.9437 10.6197 9.9437 10.2055ZM17.3496 14.5971V7.7797L15.1747 9.95459L14.0036 8.74167L18.1861 4.5592L22.3685 8.74167L21.1974 9.95459L19.0225 7.7797V14.5971H17.3496ZM11.4941 17.9431V13.7606H13.1671V16.2701H23.205V13.7606H24.878V17.9431H11.4941ZM8.98462 21.2891L11.8123 19.6161H12.2215H22.7868V22.9621L12.2215 22.9621H11.8123L8.98462 21.2891ZM24.0415 22.9621L25.3144 22.9621C25.9691 22.9621 26.1327 22.5903 26.1327 22.4044V20.1738C26.1327 19.7276 25.5872 19.6161 25.3144 19.6161H24.0415V22.9621Z" fill="#D30000"/></svg>'
    },
    {
      title: "Record a Map and Edit",
      fn: this.recordMapPopup.bind(this),
      desc: 'Record an live map or Edit the Map',
      iconComp: '<svg width="30" height="30" viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M16.5 33C25.6127 33 33 25.6127 33 16.5C33 7.3873 25.6127 0 16.5 0C7.3873 0 0 7.3873 0 16.5C0 25.6127 7.3873 33 16.5 33ZM9.95542 18.1557L18.5141 9.59704L22.585 13.6679L23.6014 12.6515L19.5305 8.58061L20.5616 7.54951C20.7826 7.32855 21.3602 7.02233 21.903 7.56514L24.617 10.2792C24.8432 10.5054 25.163 11.0903 24.6327 11.6206L14.0265 22.2268L13.695 22.5582L9.36887 22.8133L9.62397 18.4871L9.95542 18.1557Z" fill="#D30000"/></svg>'
    },
    {
      title: 'Download Map',
      fn: this.downloadMap.bind(this),
      desc: 'Download the map',
      iconComp:'<svg width="30" height="30" viewBox="0 0 38 28" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M19.0027 1C14.1148 1 11.4742 2.64505 10.1253 4.89309C9.01115 6.75006 8.86426 8.89966 8.84501 10.4459C7.48296 10.5707 5.75011 11.0419 4.25236 12.1203C2.42552 13.4357 1 15.6214 1 19.0027C1 22.384 2.42552 24.5697 4.25236 25.885C6.04097 27.1729 8.16485 27.5948 9.59213 27.5948H28.4132C29.8405 27.5948 31.9644 27.1729 33.753 25.885C35.5799 24.5697 37.0054 22.384 37.0054 19.0027C37.0054 15.6214 35.5799 13.4357 33.753 12.1203C32.2553 11.0419 30.5224 10.5707 29.1604 10.4459C29.1411 8.89966 28.9942 6.75006 27.8801 4.89309C26.5312 2.64505 23.8906 1 19.0027 1ZM10.3421 11.1606C10.3421 9.56449 10.3577 7.42135 11.4116 5.66483C12.4154 3.99181 14.4801 2.5 19.0027 2.5C23.5253 2.5 25.59 3.99181 26.5938 5.66483C27.6477 7.42135 27.6632 9.56449 27.6632 11.1606C27.6632 11.5748 27.999 11.9106 28.4132 11.9106C29.6005 11.9106 31.3977 12.2728 32.8765 13.3376C34.3171 14.3749 35.5054 16.1102 35.5054 19.0027C35.5054 21.8951 34.3171 23.6305 32.8765 24.6678C31.3977 25.7325 29.6005 26.0948 28.4132 26.0948H9.59213C8.40485 26.0948 6.60766 25.7325 5.12884 24.6678C3.68827 23.6305 2.5 21.8951 2.5 19.0027C2.5 16.1102 3.68827 14.3749 5.12884 13.3376C6.60766 12.2728 8.40485 11.9106 9.59213 11.9106C10.0063 11.9106 10.3421 11.5748 10.3421 11.1606ZM17.3434 6.47629H21.0428V14.3611H25.1816L19.1931 22.4763L13.1816 14.2182H17.3434V6.47629Z" fill="#D30000"/><path d="M10.1253 4.89309L9.91096 4.76446L10.1253 4.89309ZM8.84501 10.4459L8.86781 10.6949L9.09218 10.6744L9.09499 10.4491L8.84501 10.4459ZM4.25236 12.1203L4.10628 11.9175L4.25236 12.1203ZM4.25236 25.885L4.10628 26.0879L4.10628 26.0879L4.25236 25.885ZM33.753 25.885L33.8991 26.0879L33.753 25.885ZM33.753 12.1203L33.6069 12.3232L33.753 12.1203ZM29.1604 10.4459L28.9104 10.4491L28.9132 10.6744L29.1376 10.6949L29.1604 10.4459ZM27.8801 4.89309L28.0944 4.76446L27.8801 4.89309ZM11.4116 5.66483L11.6259 5.79346L11.4116 5.66483ZM26.5938 5.66483L26.3794 5.79346L26.5938 5.66483ZM32.8765 13.3376L32.7305 13.5405L32.8765 13.3376ZM32.8765 24.6678L33.0226 24.8706V24.8706L32.8765 24.6678ZM5.12884 24.6678L4.98276 24.8706L4.98276 24.8706L5.12884 24.6678ZM5.12884 13.3376L5.27492 13.5405H5.27492L5.12884 13.3376ZM21.0428 6.47629H21.2928V6.22629H21.0428V6.47629ZM17.3434 6.47629V6.22629H17.0934V6.47629H17.3434ZM21.0428 14.3611H20.7928V14.6111H21.0428V14.3611ZM25.1816 14.3611L25.3827 14.5095L25.6768 14.1111H25.1816V14.3611ZM19.1931 22.4763L18.991 22.6234L19.1917 22.8992L19.3943 22.6247L19.1931 22.4763ZM13.1816 14.2182V13.9682H12.6904L12.9795 14.3654L13.1816 14.2182ZM17.3434 14.2182V14.4682H17.5934V14.2182H17.3434ZM10.3397 5.02171C11.6309 2.86966 14.1754 1.25 19.0027 1.25V0.75C14.0541 0.75 11.3174 2.42043 9.91096 4.76446L10.3397 5.02171ZM9.09499 10.4491C9.11416 8.90934 9.26198 6.81793 10.3397 5.02171L9.91096 4.76446C8.76033 6.68219 8.61436 8.88998 8.59503 10.4428L9.09499 10.4491ZM4.39844 12.3232C5.85184 11.2767 7.53909 10.8166 8.86781 10.6949L8.82221 10.197C7.42683 10.3248 5.64839 10.8071 4.10628 11.9175L4.39844 12.3232ZM1.25 19.0027C1.25 15.7029 2.63597 13.5923 4.39844 12.3232L4.10628 11.9175C2.21506 13.2792 0.75 15.5399 0.75 19.0027H1.25ZM4.39844 25.6822C2.63597 24.4131 1.25 22.3025 1.25 19.0027H0.75C0.75 22.4654 2.21506 24.7262 4.10628 26.0879L4.39844 25.6822ZM9.59213 27.3448C8.20481 27.3448 6.1354 26.9328 4.39844 25.6822L4.10628 26.0879C5.94654 27.413 8.12488 27.8448 9.59213 27.8448V27.3448ZM28.4132 27.3448H9.59213V27.8448H28.4132V27.3448ZM33.6069 25.6822C31.87 26.9328 29.8006 27.3448 28.4132 27.3448V27.8448C29.8805 27.8448 32.0588 27.413 33.8991 26.0879L33.6069 25.6822ZM36.7554 19.0027C36.7554 22.3025 35.3694 24.4131 33.6069 25.6822L33.8991 26.0879C35.7903 24.7262 37.2554 22.4654 37.2554 19.0027H36.7554ZM33.6069 12.3232C35.3694 13.5923 36.7554 15.7029 36.7554 19.0027H37.2554C37.2554 15.5399 35.7903 13.2792 33.8991 11.9175L33.6069 12.3232ZM29.1376 10.6949C30.4663 10.8166 32.1535 11.2767 33.6069 12.3232L33.8991 11.9175C32.357 10.8071 30.5786 10.3248 29.1832 10.197L29.1376 10.6949ZM27.6657 5.02171C28.7434 6.81793 28.8912 8.90934 28.9104 10.4491L29.4104 10.4428C29.391 8.88998 29.2451 6.68219 28.0944 4.76446L27.6657 5.02171ZM19.0027 1.25C23.83 1.25 26.3744 2.86966 27.6657 5.02171L28.0944 4.76446C26.688 2.42043 23.9513 0.75 19.0027 0.75V1.25ZM11.1972 5.53621C10.1024 7.36086 10.0921 9.57411 10.0921 11.1606H10.5921C10.5921 9.55487 10.6129 7.48185 11.6259 5.79346L11.1972 5.53621ZM19.0027 2.25C14.4189 2.25 12.2584 3.76753 11.1972 5.53621L11.6259 5.79346C12.5724 4.21608 14.5412 2.75 19.0027 2.75V2.25ZM26.8082 5.53621C25.747 3.76753 23.5865 2.25 19.0027 2.25V2.75C23.4642 2.75 25.433 4.21608 26.3794 5.79346L26.8082 5.53621ZM27.9132 11.1606C27.9132 9.57411 27.903 7.36086 26.8082 5.53621L26.3794 5.79346C27.3925 7.48185 27.4132 9.55487 27.4132 11.1606H27.9132ZM28.4132 11.6606C28.1371 11.6606 27.9132 11.4367 27.9132 11.1606H27.4132C27.4132 11.7128 27.861 12.1606 28.4132 12.1606V11.6606ZM33.0226 13.1347C31.4922 12.0328 29.6406 11.6606 28.4132 11.6606V12.1606C29.5605 12.1606 31.3032 12.5129 32.7305 13.5405L33.0226 13.1347ZM35.7554 19.0027C35.7554 16.0288 34.5276 14.2184 33.0226 13.1347L32.7305 13.5405C34.1067 14.5314 35.2554 16.1917 35.2554 19.0027H35.7554ZM33.0226 24.8706C34.5276 23.787 35.7554 21.9766 35.7554 19.0027H35.2554C35.2554 21.8137 34.1067 23.474 32.7305 24.4649L33.0226 24.8706ZM28.4132 26.3448C29.6406 26.3448 31.4922 25.9726 33.0226 24.8706L32.7305 24.4649C31.3032 25.4925 29.5605 25.8448 28.4132 25.8448V26.3448ZM9.59213 26.3448H28.4132V25.8448H9.59213V26.3448ZM4.98276 24.8706C6.51319 25.9726 8.36481 26.3448 9.59213 26.3448V25.8448C8.44489 25.8448 6.70214 25.4925 5.27492 24.4649L4.98276 24.8706ZM2.25 19.0027C2.25 21.9766 3.4778 23.787 4.98276 24.8706L5.27492 24.4649C3.89873 23.474 2.75 21.8137 2.75 19.0027H2.25ZM4.98276 13.1347C3.4778 14.2184 2.25 16.0288 2.25 19.0027H2.75C2.75 16.1917 3.89873 14.5314 5.27492 13.5405L4.98276 13.1347ZM9.59213 11.6606C8.36481 11.6606 6.51319 12.0328 4.98276 13.1347L5.27492 13.5405C6.70214 12.5129 8.44489 12.1606 9.59213 12.1606V11.6606ZM10.0921 11.1606C10.0921 11.4367 9.86827 11.6606 9.59213 11.6606V12.1606C10.1444 12.1606 10.5921 11.7128 10.5921 11.1606H10.0921ZM21.0428 6.22629H17.3434V6.72629H21.0428V6.22629ZM21.2928 14.3611V6.47629H20.7928V14.3611H21.2928ZM25.1816 14.1111H21.0428V14.6111H25.1816V14.1111ZM19.3943 22.6247L25.3827 14.5095L24.9804 14.2126L18.9919 22.3279L19.3943 22.6247ZM12.9795 14.3654L18.991 22.6234L19.3952 22.3292L13.3837 14.0711L12.9795 14.3654ZM17.3434 13.9682H13.1816V14.4682H17.3434V13.9682ZM17.0934 6.47629V14.2182H17.5934V6.47629H17.0934Z" fill="#D30000"/></svg>'
    }
  ]

  goBackArrow() {
    this.location.back()
  }

  uploadPopup() {
    this.uploadPopupState = !this.uploadPopupState
  }

  recordMapPopup() {
    this.recordMapPopupState = !this.recordMapPopupState
    if(this.uploadPopupState) {
      this.uploadPopupState = false
    }
  }

  uploadMapPopup() {
    this.uploadMapPopupState = !this.uploadMapPopupState
    if(this.uploadPopupState) {
      this.uploadPopupState = false
    }
  }


  recordMap() {
    this.recordMapPopup()
    // Write the code to record the map here
  }

  uploadMap() {
    console.log("Map uploading!");
    console.log(this.idParam);
    console.log(this.selectedPoint);


    if (this.selectedPoint) {
      fetch(`http://localhost:3000/maps/${this.idParam}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ point: this.selectedPoint })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(error => {
            throw new Error(error.message || 'Failed to update map');
          });
        }
        return response.json();
      })
      .then(updatedMap => {
        console.log('Map updated successfully:', updatedMap);
        // Handle successful update
      })
      .catch(error => {
        console.error('Error updating map:', error);
        // Handle error
        this.errorMessage = error.message;
        setTimeout(() => {
          this.errorMessage = '';
        }, 5000);
      });
    } else {
      // Handle validation error if point is not selected
      this.errorMessage = 'Please select a point.';
      setTimeout(() => {
        this.errorMessage = '';
      }, 5000);
    }
  }


  downloadMap() {
    this.downloadMapToastState = !this.downloadMapToastState
    if(this.uploadPopupState) {
      this.uploadPopupState = false
    }

    setTimeout(()=> {
      this.downloadMapToastState = !this.downloadMapToastState
    },3000)
  }


}
